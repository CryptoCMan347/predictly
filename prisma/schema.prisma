// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- NextAuth.js required models ---

model User {
  id                String   @id @default(cuid())
  name              String?
  email             String?  @unique
  emailVerified     DateTime?
  image             String?
  // --- Custom fields for Predictly ---
  username          String?  @unique
  created_at        DateTime @default(now())
  credits           Int      @default(0)
  pro_status        Boolean  @default(false)
  total_predictions Int      @default(0)
  wins              Int      @default(0)
  xp_points         Int      @default(0)
  hashedPassword    String?
  accounts          Account[]
  sessions          Session[]
  referrals         Referral[] @relation("UserReferrals")
  referredBy        Referral?  @relation("UserReferredBy", fields: [referredById], references: [id])
  referredById      String?
  transactions      Transaction[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// --- Referral system ---
model Referral {
  id        String   @id @default(cuid())
  code      String   @unique
  user      User     @relation("UserReferrals", fields: [userId], references: [id])
  userId    String
  referred  User[]   @relation("UserReferredBy")
  createdAt DateTime @default(now())
}

// --- Transactions ---
model Transaction {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  amount      Float    // USD or crypto amount
  credits     Int      // Number of credits purchased or adjusted
  paymentType String   // 'stripe', 'coinbase', 'admin', etc.
  paymentId   String?  // Stripe/Coinbase payment ID or reference
  status      String   // 'pending', 'confirmed', 'failed', etc.
  createdAt   DateTime @default(now())
}
